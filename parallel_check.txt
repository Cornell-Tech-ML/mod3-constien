MAP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map,
/Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (163)
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (163)
-----------------------------------------------------------------------------|loop #ID
    def _map(                                                                |
        out: Storage,                                                        |
        out_shape: Shape,                                                    |
        out_strides: Strides,                                                |
        in_storage: Storage,                                                 |
        in_shape: Shape,                                                     |
        in_strides: Strides,                                                 |
    ) -> None:                                                               |
        # TODO: Implement for Task 3.1.                                      |
        if np.array_equal(in_strides, out_strides) and np.array_equal(       |
            in_shape, out_shape                                              |
        ):                                                                   |
            for i in prange(len(out)):---------------------------------------| #0
                out[i] = fn(in_storage[i])                                   |
        else:                                                                |
            for i in prange(len(out)):---------------------------------------| #1
                in_index = np.empty_like(in_shape, dtype=np.int32)           |
                out_index = np.empty_like(out_shape, dtype=np.int32)         |
                                                                             |
                to_index(i, out_shape, out_index)                            |
                broadcast_index(out_index, out_shape, in_shape, in_index)    |
                                                                             |
                out[index_to_position(out_index, out_strides)] = fn(         |
                    in_storage[index_to_position(in_index, in_strides)]      |
                )                                                            |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #0, #1).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
ZIP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip,
/Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (215)
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (215)
---------------------------------------------------------------------------|loop #ID
    def _zip(                                                              |
        out: Storage,                                                      |
        out_shape: Shape,                                                  |
        out_strides: Strides,                                              |
        a_storage: Storage,                                                |
        a_shape: Shape,                                                    |
        a_strides: Strides,                                                |
        b_storage: Storage,                                                |
        b_shape: Shape,                                                    |
        b_strides: Strides,                                                |
    ) -> None:                                                             |
        # TODO: Implement for Task 3.1.                                    |
        if (                                                               |
            np.array_equal(a_strides, b_strides)                           |
            and np.array_equal(b_strides, out_strides)                     |
            and np.array_equal(a_shape, b_shape)                           |
            and np.array_equal(a_shape, out_shape)                         |
        ):                                                                 |
            for i in prange(len(out)):-------------------------------------| #2
                out[i] = fn(a_storage[i], b_storage[i])                    |
        else:                                                              |
            for i in prange(len(out)):-------------------------------------| #3
                a_index = np.empty_like(a_shape, dtype=np.int32)           |
                b_index = np.empty_like(b_shape, dtype=np.int32)           |
                out_index = np.empty_like(out_shape, dtype=np.int32)       |
                                                                           |
                to_index(i, out_shape, out_index)                          |
                broadcast_index(out_index, out_shape, a_shape, a_index)    |
                broadcast_index(out_index, out_shape, b_shape, b_index)    |
                                                                           |
                out[index_to_position(out_index, out_strides)] = fn(       |
                    a_storage[index_to_position(a_index, a_strides)],      |
                    b_storage[index_to_position(b_index, b_strides)],      |
                )                                                          |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #2, #3).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
REDUCE

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce,
/Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (274)
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (274)
---------------------------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                                                   |
        out: Storage,                                                                              |
        out_shape: Shape,                                                                          |
        out_strides: Strides,                                                                      |
        a_storage: Storage,                                                                        |
        a_shape: Shape,                                                                            |
        a_strides: Strides,                                                                        |
        reduce_dim: int,                                                                           |
    ) -> None:                                                                                     |
        # TODO: Implement for Task 3.1.                                                            |
        for i in prange(len(out)):-----------------------------------------------------------------| #4
            out_index = np.empty(out_shape.shape, dtype=np.int32)                                  |
            to_index(i, out_shape, out_index)                                                      |
            location = index_to_position(out_index, out_strides)                                   |
                                                                                                   |
            a_index = out_index.copy()                                                             |
            reduced = out[location]                                                                |
            for j in range(a_shape[reduce_dim]):                                                   |
                a_index[reduce_dim] = j                                                            |
                                                                                                   |
                reduced = fn(a_storage[index_to_position(a_index, a_strides)], reduced)  # noqa    |
                                                                                                   |
            out[location] = reduced                                                                |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #4).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (285) is
hoisted out of the parallel loop labelled #4 (it will be performed before the
loop is executed and reused inside the loop):
   Allocation:: out_index = np.empty(out_shape.shape, dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY

================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply,
/Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (301)
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/minhash1/Documents/ASSGN/mod3-constien/minitorch/fast_ops.py (301)
-----------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                             |
    out: Storage,                                                                        |
    out_shape: Shape,                                                                    |
    out_strides: Strides,                                                                |
    a_storage: Storage,                                                                  |
    a_shape: Shape,                                                                      |
    a_strides: Strides,                                                                  |
    b_storage: Storage,                                                                  |
    b_shape: Shape,                                                                      |
    b_strides: Strides,                                                                  |
) -> None:                                                                               |
    """NUMBA tensor matrix multiply function.                                            |
                                                                                         |
    Should work for any tensor shapes that broadcast as long as                          |
                                                                                         |
    ```                                                                                  |
    assert a_shape[-1] == b_shape[-2]                                                    |
    ```                                                                                  |
                                                                                         |
    Optimizations:                                                                       |
                                                                                         |
    * Outer loop in parallel                                                             |
    * No index buffers or function calls                                                 |
    * Inner loop should have no global writes, 1 multiply.                               |
                                                                                         |
                                                                                         |
    Args:                                                                                |
    ----                                                                                 |
        out (Storage): storage for `out` tensor                                          |
        out_shape (Shape): shape for `out` tensor                                        |
        out_strides (Strides): strides for `out` tensor                                  |
        a_storage (Storage): storage for `a` tensor                                      |
        a_shape (Shape): shape for `a` tensor                                            |
        a_strides (Strides): strides for `a` tensor                                      |
        b_storage (Storage): storage for `b` tensor                                      |
        b_shape (Shape): shape for `b` tensor                                            |
        b_strides (Strides): strides for `b` tensor                                      |
                                                                                         |
    Returns:                                                                             |
    -------                                                                              |
        None : Fills in `out`                                                            |
                                                                                         |
    """                                                                                  |
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                               |
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                               |
                                                                                         |
    N, I, J = out_shape  # noqa                                                          |
    K = a_shape[-1]  # noqa                                                              |
                                                                                         |
    for n in prange(N):------------------------------------------------------------------| #5
        for i in range(I):                                                               |
            for j in range(J):                                                           |
                a_idx = n * a_batch_stride + i * a_strides[1]                            |
                b_idx = n * b_batch_stride + j * b_strides[2]                            |
                                                                                         |
                accum = 0.0                                                              |
                for _ in range(K):                                                       |
                    accum += a_storage[a_idx] * b_storage[b_idx]                         |
                    a_idx += a_strides[2]                                                |
                    b_idx += b_strides[1]                                                |
                                                                                         |
                out[n * out_strides[0] + i * out_strides[1] + j * out_strides[2]] = (    |
                    accum                                                                |
                )                                                                        |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #5).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
